// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModeloBD;

namespace ModeloBD.Migrations
{
    [DbContext(typeof(Repositorio))]
    [Migration("20220127231011_iNI2")]
    partial class iNI2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Modelo.Entidades.Calificacion", b =>
                {
                    b.Property<int>("CalificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Nota1")
                        .HasColumnType("real");

                    b.Property<float>("Nota2")
                        .HasColumnType("real");

                    b.Property<float>("Nota3")
                        .HasColumnType("real");

                    b.Property<float>("Nota4")
                        .HasColumnType("real");

                    b.Property<float>("Nota5")
                        .HasColumnType("real");

                    b.Property<float>("Nota6")
                        .HasColumnType("real");

                    b.Property<float>("Nota7")
                        .HasColumnType("real");

                    b.Property<int>("Postulacion_DetId")
                        .HasColumnType("int");

                    b.HasKey("CalificacionId");

                    b.HasIndex("Postulacion_DetId")
                        .IsUnique();

                    b.ToTable("calificaciones");
                });

            modelBuilder.Entity("Modelo.Entidades.Clasificacion", b =>
                {
                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("MarcaId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("clasificaciones");
                });

            modelBuilder.Entity("Modelo.Entidades.Configuracion", b =>
                {
                    b.Property<int>("ConfiguracionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("NotaMinima")
                        .HasColumnType("real");

                    b.Property<int>("PeriodoVigenteId")
                        .HasColumnType("int");

                    b.Property<float>("PesoNota1")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota2")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota3")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota4")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota5")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota6")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota7")
                        .HasColumnType("real");

                    b.HasKey("ConfiguracionId");

                    b.HasIndex("PeriodoVigenteId")
                        .IsUnique();

                    b.ToTable("configuraciones");
                });

            modelBuilder.Entity("Modelo.Entidades.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarcaId");

                    b.ToTable("marcas");
                });

            modelBuilder.Entity("Modelo.Entidades.Oferta", b =>
                {
                    b.Property<int>("OfertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreBuro")
                        .HasColumnType("int");

                    b.HasKey("OfertaId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("ofertas");
                });

            modelBuilder.Entity("Modelo.Entidades.Oferta_Det", b =>
                {
                    b.Property<int>("Oferta_DetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Descuento")
                        .HasColumnType("real");

                    b.Property<bool>("Garantia")
                        .HasColumnType("bit");

                    b.Property<float>("LoteMinimo")
                        .HasColumnType("real");

                    b.Property<int>("OfertaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("TiempoEntrega")
                        .HasColumnType("int");

                    b.HasKey("Oferta_DetId");

                    b.HasIndex("OfertaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ofertas_det");
                });

            modelBuilder.Entity("Modelo.Entidades.Periodo", b =>
                {
                    b.Property<int>("PeriodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("PeriodoId");

                    b.ToTable("periodos");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion", b =>
                {
                    b.Property<int>("PostulacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfertaId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.HasKey("PostulacionId");

                    b.HasIndex("OfertaId");

                    b.HasIndex("PeriodoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("postulaciones");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion_Det", b =>
                {
                    b.Property<int>("Postulacion_DetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PostulacionId")
                        .HasColumnType("int");

                    b.HasKey("Postulacion_DetId");

                    b.HasIndex("PostulacionId");

                    b.ToTable("postulaciones_det");
                });

            modelBuilder.Entity("Modelo.Entidades.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unidad")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductoId");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("Modelo.Entidades.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.ToTable("proveedores");
                });

            modelBuilder.Entity("Modelo.Entidades.Calificacion", b =>
                {
                    b.HasOne("Modelo.Entidades.Postulacion_Det", "Postulacion_Det")
                        .WithOne("Calificacion")
                        .HasForeignKey("Modelo.Entidades.Calificacion", "Postulacion_DetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postulacion_Det");
                });

            modelBuilder.Entity("Modelo.Entidades.Clasificacion", b =>
                {
                    b.HasOne("Modelo.Entidades.Marca", "Marca")
                        .WithMany("Clasificacion")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Producto", "Producto")
                        .WithMany("Clasificacion")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Modelo.Entidades.Configuracion", b =>
                {
                    b.HasOne("Modelo.Entidades.Periodo", "PeriodoVigente")
                        .WithOne()
                        .HasForeignKey("Modelo.Entidades.Configuracion", "PeriodoVigenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeriodoVigente");
                });

            modelBuilder.Entity("Modelo.Entidades.Oferta", b =>
                {
                    b.HasOne("Modelo.Entidades.Periodo", "Periodo")
                        .WithMany("Oferta")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("Modelo.Entidades.Oferta_Det", b =>
                {
                    b.HasOne("Modelo.Entidades.Oferta", "Oferta")
                        .WithMany("Oferta_Det")
                        .HasForeignKey("OfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Producto", "Producto")
                        .WithMany("Oferta_Det")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oferta");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion", b =>
                {
                    b.HasOne("Modelo.Entidades.Oferta", "Oferta")
                        .WithMany("Postulacion")
                        .HasForeignKey("OfertaId");

                    b.HasOne("Modelo.Entidades.Periodo", "Periodo")
                        .WithMany("Postulacion")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Modelo.Entidades.Proveedor", "Proveedor")
                        .WithMany("Postulacion")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oferta");

                    b.Navigation("Periodo");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion_Det", b =>
                {
                    b.HasOne("Modelo.Entidades.Postulacion", "Postulacion")
                        .WithMany("Postulacion_Detalle")
                        .HasForeignKey("PostulacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postulacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Marca", b =>
                {
                    b.Navigation("Clasificacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Oferta", b =>
                {
                    b.Navigation("Oferta_Det");

                    b.Navigation("Postulacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Periodo", b =>
                {
                    b.Navigation("Oferta");

                    b.Navigation("Postulacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion", b =>
                {
                    b.Navigation("Postulacion_Detalle");
                });

            modelBuilder.Entity("Modelo.Entidades.Postulacion_Det", b =>
                {
                    b.Navigation("Calificacion");
                });

            modelBuilder.Entity("Modelo.Entidades.Producto", b =>
                {
                    b.Navigation("Clasificacion");

                    b.Navigation("Oferta_Det");
                });

            modelBuilder.Entity("Modelo.Entidades.Proveedor", b =>
                {
                    b.Navigation("Postulacion");
                });
#pragma warning restore 612, 618
        }
    }
}
